*******************************************************************************
Free386 Function Reference
								(C)nabe@abk
*******************************************************************************
[TAB=8][Shift-JIS]

###############################################################################
●はじめに
###############################################################################

　基本的に、TOWNS の RUN386 バージョンである Ver1.2 に準拠していますが、
Ver2.1/2.2 相当のファンクションも実装されていることがあります。

　非対応（非互換）ファンクション一覧はマニュアルを参照してください。

###############################################################################
●DOS-Extender拡張ファンクションについて
###############################################################################

　ah レジスタに 25h を設定して int 21h を発効すると、それは DOS に対するファ
ンクション（割り込みベクタの設定・取得）ではなく、DOS-Extender に対するファン
クションと解釈されます。

　これが DOS-Extender拡張ファンクション です。AL レジスタに目的の機能番号を
設定し呼び出します。ここでは、Free386 に実装済の機能のみ述べます。


○共通の注意事項

　なおすべてのファンクションで、出力に関係のないレジスタは保存されます。保存
されなかったら、こちらのミスです。

　セレクタの指定でメモリ型を想定しているところにシステム型のセレクタを指定す
るなどしないでください。チェックしてませんので、簡単にセグメントディスクリプ
タを破壊します。

-------------------------------------------------------------------------------
○2500h：未定義ファンクション
-------------------------------------------------------------------------------

	IN	 AX = 2500h
	Ret	 Cy = 1
		EAX = A5A5A5A5h

　2500h に限らず、未実装ファンクション共通の動作。

-------------------------------------------------------------------------------
○2501h：リアルモード←→プロテクトモード切り換え用バッファのクリア
-------------------------------------------------------------------------------

	IN	 AX = 2501h
	Ret	 Cy = 0

　リアルモード←→プロテクトモードの相互切替えが複数起こっても、切り替えに
使用したデータバッファはネストされ、きちんと最初の地点に戻れるように処理さ
れています。
　もし、途中で iret せずに制御権を獲得した場合、この切り替えバッファを開放
するため、このファンクションを呼び出す必要があります。

-------------------------------------------------------------------------------
○2502h：プロテクトモード割り込みベクタの取得
-------------------------------------------------------------------------------

	IN	 AX = 2502h
		 CL = ベクタ番号
	Ret	    Cy = 0
		ES:EBX = 割り込みハンドラのエントリーポイント

-------------------------------------------------------------------------------
○2503h：DOS割り込みベクタの取得
-------------------------------------------------------------------------------

	IN	 AX = 2503h
		 CL = ベクタ番号
	Ret	 Cy = 0
		EBX = 割り込みハンドラのエントリーポイント（SEG:OFF 形式）

-------------------------------------------------------------------------------
○2504h：プロテクトモード割り込みベクタの設定
-------------------------------------------------------------------------------

	IN	 AX = 2504h
		 CL = ベクタ番号
	     DS:EDX = 割り込みを設定するハンドラのエントリーポイント
	Ret	 Cy = 0

　CS:EDX ではなく DS:EDX であることに注意してください。DS には通常データセ
レクタが格納されてますが、このファンクション実行前に CS を DS にコピーしな
ければなりません。
　これはよく忘れがちで、その度にコンピュータが止まってくれます（汗）

＃データセグメントは、読み書き可能ではありますが実行可能ではありません。

-------------------------------------------------------------------------------
○2505h：DOS割り込みベクタの設定
-------------------------------------------------------------------------------

	IN	 AX = 2505h
		 CL = 割り込み番号
		EBX = 割り込みハンドラのエントリーポイント（SEG:OFF 形式）
	Ret	 Cy = 0

-------------------------------------------------------------------------------
○2506h：常にプロテクトモードで実行される割り込みの設定
-------------------------------------------------------------------------------

	IN	 AX = 2506h
		 CL = 割り込み番号
	     DS:EDX = 割り込みハンドラのエントリーポイント（SEG:OFF 形式）
	Ret	 Cy = 0

　最もよく使われます。このファンクションで設定した割り込みがリアルモードで
発生した場合、DOS-Extender の手によってプロテクトモードへ切替えられます。
　このファンクションも、04h同様『DS に CS の値をコピー』することを忘れない
でください。

-------------------------------------------------------------------------------
○2507h：DOS/プロテクトモードの割り込みを同時に設定
-------------------------------------------------------------------------------

	IN	 AX = 2507h
		 CL = 割り込み番号
		EBX = リアルモードハンドラ（SEG:OFF）
	     DS:EDX = 割り込みハンドラのエントリーポイント（SEG:OFF 形式）
	Ret	 Cy = 0

　なお、すべての割り込みファンクションにおいて、int 21h のベクタ設定は禁止
されています。cl = 21h を指定しても無視されます。

-------------------------------------------------------------------------------
○2508h：指定セレクタのベースリニアアドレスを取得
-------------------------------------------------------------------------------

	IN	 AX = 2508h
		 BX = セレクタ値
	Ret	ECX = ベースアドレス

　メモリ型以外のセレクタを指定した場合、正しい値を返さないことがあります。
（エラーにはなりません）

-------------------------------------------------------------------------------
○2509h：リニアアドレスから物理アドレスへの変換
-------------------------------------------------------------------------------

	IN	 AX = 2509h
		EBX = リニアアドレス
	Ret	 Cy = 0:成功
			ECX = 物理アドレス
		 Cy = 1:失敗（マッピングされていない）

　DMA を使うソフトウェアが利用してるようです（mpegdec.exp など）。

-------------------------------------------------------------------------------
○250ah：物理メモリのマッピング
-------------------------------------------------------------------------------

	IN	 AX = 250ah
		 es = マップするセレクタ
		ebx = 張りつける物理メモリ
		ecx = 張りつけるページ数 (1page=4KB)
	Ret	 Cy = 0:成功
			eax = 張りつけたメモリのセレクタ内オフセット
		 Cy = 1:失敗
			eax = 8 : ページテーブル不足
			eax = 9 : 指定セレクタが不正

　物理メモリを張りつけます。必要以上に割り当てないように注意してください。

-------------------------------------------------------------------------------
○250ch：ハードウェア割り込みベクタの取得
-------------------------------------------------------------------------------

	IN	 AX = 250ch
	Ret	 Cy = 0
		 al = マスタ側(IRQ0-7)
		 ah = スレーブ側(IRQ8-15)

-------------------------------------------------------------------------------
○250dh：リアルモードリンク情報の取得
-------------------------------------------------------------------------------

	IN	  AX  = 250ch
	Ret	  Cy  = 0
		  eax = CS:IP プロテクトモードルーチンコールのための
		       リアルモードコールバックプロシジャーのアドレス
		  ecx = バッファのサイズ
		  ebx = コールバッファのリアルモードアドレス
		es:edx= コールバッファのプロテクトモードアドレス

リアルモードコールバックプロシジャー

・far call で呼び出す。
・スタックにパラメーターを設定する。
・プロテクトモード側スタックは「リアルモードのスタック領域をそのまま使用」する。

	DWORD	プロテクトモードのEIP
	WORD	プロテクトモードのCS
	DWORD	プロテクトモードのセグメントセレクタの初期値テーブルへのポインタ
		0000:0000 ならデフォルト値。
	以降	プロテクトモードルーチンへのスタック引数

※正しい仕様 http://www.ctyme.com/intr/rb-2615.htm

-------------------------------------------------------------------------------
○250eh：リアルモードのルーチンのfarコール
-------------------------------------------------------------------------------

	IN	    AX = 250eh
		   EBX = 呼び出し先  CS:IP (High:Low)
		   ECX = スタックコピー数 (word)
		その他   汎用レジスタは、ルーチン呼び出し時の引数となる。

	Ret  Cy=0 成功
		　セグメントレジスタは呼び出し時のまま。
		　汎用レジスタとフラグはキャリーフラグを除いてルーチン呼び出
		し後の値に設定される。

	     Cy=1 失敗
	     	　eax = 1  スタックのスペースが足りない。

-------------------------------------------------------------------------------
○250fh：プロテクトモードアドレスを DOS アドレスに変換
-------------------------------------------------------------------------------

	IN	    AX = 250fh
		ES:EBX = プロテクトモードアドレス
		   ECX = メモリサイズ
	Ret	    Cy = 0:成功
			ECX = Seg:Off形式のDOSメモリアドレス
		    Cy = 1:失敗
		    	ECX = 破壊（Interrupt)

　指定アドレスから指定サイズ内の物理メモリが、すべて1MB以内のDOSメモリ空間に
存在し連続しているかを調べます。ES は 0C 等が指定されることがあります。

※TOWNSのRUN386では、Cy=1のときECXは破壊され定数が返ります。
　また1MB範囲内では 0C0000h までの範囲である必要があるようです。

-------------------------------------------------------------------------------
○2510h：リアルモードのルーチンのfarコール
-------------------------------------------------------------------------------

	IN	    AX = 2510h
		DS:EDX = パラメタブロック
		   EBX = 呼び出し先  CS:IP (High:Low)
		   ECX = スタックコピー数 (word)
		その他   汎用レジスタは、ルーチン呼び出し時の引数となる。

	Ret  Cy=0 成功
		　セグメントレジスタと EDX は呼び出し時のまま。
		　他の汎用レジスタとフラグはキャリーフラグを除いてルーチン呼び
		出し後の値に設定される。
		　DS〜GS,EDX の結果は、パラメタブロックの該当位置に記録される。
		EAX の位置にはキャリーフラグを含めた戻りフラグ値が設定される。

	     Cy=1 失敗
	     	　eax = 1  スタックのスペースが足りない。

		DS:EDX 	+00h w	DS
			+02h w	ES
			+04h w	FS
			+06h w	GS
			+08h d	EAX  / Ret 時はリアルのフラグが設定される
			+0Ch d	EBX
			+10h d	ECX
			+14h d	EDX

※TOWNSの RUN386.EXE (Ver1.2) でテストする限り、DS:EDXで書き換えられるのは、
　DS,ES,FS,GS,EDX のみ。EAXの部分もそのまま（フラグ値なし）。
　またフラグレジスタもリアルモードルーチンの値は引き継がれていない。

-------------------------------------------------------------------------------
○2511h：リアルモードの INT呼び出し
-------------------------------------------------------------------------------

	IN	    AX = 2511h
		DS:EDX = パラメタブロック
		その他   汎用レジスタは、INT呼び出し時の引数となる。

	Ret	セグメントレジスタと EDX は呼び出し時のまま。
		他の汎用レジスタとフラグは、INT呼び出し後の値に設定される。
		DS〜GS、EDX の結果は、パラメタブロックの該当位置に記録される。
		（パラメタブロックの eax、INT番号は変化しない）

		DS:EDX 	+00h w	INT番号
			+02h w	DS
			+04h w	ES
			+06h w	FS
			+08h w	GS
			+0Ah d	EAX
			+0Eh d	EDX

-------------------------------------------------------------------------------
○2513h：セレクタのエイリアス作成
-------------------------------------------------------------------------------

	IN	BX = 元となるセレクタ
		CL = デスクリプタ 5byte 目
		CH = bit 6=1 USE32  (bit6 のみ意味を持つ)
		     bit 6=0 USE16
	Ret	Cy = 0 成功
			eax = 作成したセレクタ
		Cy = 1 失敗
			eax = 8 LDT内に空きセレクタがない
			    = 9 無効なセレクタが指定された

　セレクタ関連ファンクションの詳細は、CPU の資料等を参照下さい。

-------------------------------------------------------------------------------
○2514h：セレクタ属性の変更
-------------------------------------------------------------------------------

	IN	BX = 指定セレクタ
		CL = デスクリプタ 5byte 目
		CH = bit 6=1 USE32  (bit6 のみ意味を持つ)
		     bit 6=0 USE16
	Ret	Cy = 0 成功
		Cy = 1 失敗
			eax = 9 無効なセレクタが指定された

-------------------------------------------------------------------------------
○2515h：セレクタ属性の取得
-------------------------------------------------------------------------------

	IN	BX = 指定セレクタ
	Ret	Cy = 0 成功
			CL  = ディスリプタ 5byte 目
			CH  = ディスリプタ 6byte 目
			ECX = bit16-31 は破壊
		Cy = 1 失敗
			eax = 9 無効なセレクタが指定された

-------------------------------------------------------------------------------
○2517h：DOS仲介バッファのアドレス取得 (PLVer2.1c以降)
-------------------------------------------------------------------------------

	Ret	    Cy = 0
		ES:EBX = バッファのプロテクトモードアドレス
		   ECX = バッファのリアルモードアドレス (seg:off=High:Low)
		   EDX = バッファサイズ

　ax=250d で返されるバッファと同一。

-------------------------------------------------------------------------------
○25C0h：DOSメモリブロックの取得
-------------------------------------------------------------------------------

	IN	BX = 要求するサイズ (para)
	Ret	Cy = 0 成功
			AX = 割り当てたメモリのセグメントアドレス(DOS)
		Cy = 1 失敗
			AX = DOSエラーコード

-------------------------------------------------------------------------------
○25C1h：DOSメモリブロックの解放
-------------------------------------------------------------------------------

	IN	CX = 解放するセレクタ
	Ret	Cy = 0 成功
		Cy = 1 失敗
			AX = DOSエラーコード

-------------------------------------------------------------------------------
○25C2h：DOSメモリブロックのサイズ変更
-------------------------------------------------------------------------------

	IN	BX = 変更するサイズ (para)
		CX = 変更するセレクタ
	Ret	Cy = 0 成功
		Cy = 1 失敗
			AX = DOSエラーコード

-------------------------------------------------------------------------------
○25C3h：DOSプログラムを子プロセスとして実行
-------------------------------------------------------------------------------

	DOS function call の int 21h / ah=4bh に cahin されます。


###############################################################################
●DOSファンクション
###############################################################################

　DOS ファンクションについては、「オフセット」レジスタやサイズ指定レジスタが
32bit に拡張されている以外は基本的に変わりません。DOS ファンクションは、合著
氏の書かれた「ＭＳ?ＤＯＳ主要ファンクションコール一覧（dos/dosfunc.txt）」や
Interrupt LIST などを参照してください。

　基本的に、DS:DX などのバッファ指定は DS:EDX というように拡張されています。
　また、文字列の出力など、バッファを介したデータ出力で一度に書き出せる量は
仲介バッファメモリのサイズに制限されます（ファイル入出力は無制限）。

　※Ver0.60においては16KB確保してます。将来的にも8KBは保証します。

　FCB function は DOS-Extender ではサポートされません。
　常駐終了の function は、通常の終了 function に chain されています。

-------------------------------------------------------------------------------
○30h：Verison情報取得
-------------------------------------------------------------------------------

	IN	EBX

	Ret	すべて共通
			EAX = 上位16bit に 'DX'(4458h)
			 AL = MS-DOS メジャーVersion (2進数)
			 AH = MS-DOS マイナーVersion (2進数)

		EBX = "PHAR" の場合（メモリ逆順 / 50484152h）
			EBX = "12aJ" (4A613231h)   << Ver 1.2Ja の意味
			ECX = "DPMI" or "VCPI" or " DOS"
				（Free386 では VCPI(56435049h) 固定）
			EDX = 0

		EBX = "F386" の場合（メモリ正順 / 36383346h）
			EAX = 上位16bit に 'DX'(4458h)
			 AL = Free386 メジャバージョン
			 AH = Free386 マイナーバージョン
			EBX = Free386 アセンブル日 (YYYYMMDD / 2進化10進数)
			ECX = (予約)
			EDX = ' ABK' (メモリ正順 / 4b424120h)

		EBX = "FJDX" の場合（メモリ逆順 / 464a4458h）
			EAX = 464a4458h / "FJDX"  (メモリ逆順)
			EBX = 204b656eh / " Ken"  (メモリ逆順)
			ECX = 40633300h / "@C3",0 (メモリ逆順)

		※TOWNS DOS-Extender隠しファンクション

-------------------------------------------------------------------------------
○1Bh：カレントドライブのドライブデータ取得
-------------------------------------------------------------------------------
○1Ch：任意ドライブのドライブデータ取得
-------------------------------------------------------------------------------

	IN	    DL = ドライブ番号 (ah=1ch のときのみ)
	Ret	    AL = クラスタ当りセクタ数
		    CX = セクタ  当りバイト数
		    DX = クラスタ数
		DS:EBX = FAT-ID へのポインタ

-------------------------------------------------------------------------------
○38h：国別情報の取得／設定
-------------------------------------------------------------------------------

　　（取得）
	IN	・国コード < 0ffh
		  AL = 取得したい国コード (01h=USA, 51h=日本)
		・国コード >= 0ffh
		  AL = 0ffh
		  BX = 取得したい国コード
		・共通
		　DS:EDX = データが返るバッファ(min 34byte)
	Ret	Cy = 0 成功
		Cy = 1
			AX = 02  無効な国コード

　　（設定）
	IN	AL/BX = 国コード（取得の欄参照）
		  EDX = 0ffffffffh

-------------------------------------------------------------------------------
○48h：LDT内にセレクタを作成しメモリを確保
-------------------------------------------------------------------------------

	IN	EBX = 4KB のページ数

	Ret	Cy=0 成功
			AX = 割り当てられたセレクタ
		Cy=1 失敗
			AX  = 8 メモリかセレクタ不足
			EBX = 空きページ数

-------------------------------------------------------------------------------
○49h：LDT内のセレクタを削除しメモリを解放
-------------------------------------------------------------------------------

	IN	ES = 開放するセレクタ

	Ret	Cy=0 成功
			AX = 割り当てられたセレクタ
		Cy=1 失敗
			EAX = 8 メモリかセレクタ不足
			EAX = 9 セレクタが無効
			EBX = 空きページ数

　※割り当てた物理メモリは実際には開放されません。

-------------------------------------------------------------------------------
○4ah：セレクタの大きさを変更
-------------------------------------------------------------------------------

	IN	ES  = 変更するセレクタ
		EBX = 変更後のサイズ（ページ数）

	Ret	Cy=0 成功
		Cy=1 失敗
			EAX = 8 メモリかセレクタ不足
			EAX = 9 セレクタが無効
			EBX = 空きページ数

　※サイズを縮小しても、割り当てた物理メモリは実際には開放されません。

-------------------------------------------------------------------------------
○4bh：DOSプログラムを子プロセスとして実行
-------------------------------------------------------------------------------

	未実装です。

-------------------------------------------------------------------------------
○52h：IO.SYS の内部ワークエリアアドレスを取得
-------------------------------------------------------------------------------

	IN	AH 52H

	Ret	ES:EBX DOSワークエリアのあるアドレス

	ES:[BX-02] 2 最初の MCB のセグメントアドレス
	  :[BX+00] 4 最初の DPB のアドレス(OFF:SEG)
	      +04  4 File System Tabel のアドレス(OFF:SEG)
	      +08  4 CLOCK$ デバイスヘッダアドレス(OFF:SEG)
	      +0C  4 CON デバイスヘッダアドレス(OFF:SEG)
	      +10  1 DOS 2:論理デバイス数/DOS 3:ブロックデバイス数
	      +11  1 任意のデバイスの最大クラスタサイズ
	      +13  4 最初の DISK BUFFER のアドレス(OFF:SEG)
	      +17 18 DOS 2:NUL デバイスヘッダ(not address)
	      ------- DOS 3.0 -----
	      +17  4 DOS 3:カレントディレクトリ構造体のアドレス
	      +1B  1 LASTDRIVE
	      +22  4 最初のFCBのアドレス(OFF:SEG)
	      +28 18 DOS 3:NUL デバイスヘッダ(not address)


###############################################################################
●Free386拡張ファンクションについて
###############################################################################

　Free386 は独自拡張のファンクションを提供しています。
　Free386 拡張ファンクションは int 9ch により呼び出します。

　しかし、従来の DOS-Extender との互換性のために、

	mov	ah ,30h
	mov	ebx,'F386'	;NASM 以外では '683F'
	int	21h
	cmp	edx,' ABK'	;NASM 以外では 'KBA '

などとして、使用DOS-Extender が Free386 であることを確認してください。
（Free386専用ソフトならば、そのままエラー終了するのが吉でしょう）

-------------------------------------------------------------------------------
○00h：バージョン情報取得
-------------------------------------------------------------------------------

	IN	 AH = 00h
	Ret	 AL = Free386 メジャバージョン
		 AH = Free386 マイナーバージョン
		EBX = Free386 リリース日 (YYYYMMDD / 2進化10進数)
		ECX = 0 (予約)
		EDX = ' ABK' (2041424Bh) / intel式で文字列格納時に' ABK'となる

-------------------------------------------------------------------------------
○01h：マシン情報取得
-------------------------------------------------------------------------------

	IN	 AH = 01h
　	Ret	EAX = 機種コード
			00h		(不明)
			10h-1fh		PC-9801/21
			20h-2fh		FM TOWNS
			30h-3fh		PC/AT互換機

　機種コードは、Free386 本体に定数として埋め込まれています。
　bit 0-3 は将来の拡張のため予約されていますので、0f0h で and を取ってから機
種情報を使用してください。

-------------------------------------------------------------------------------
○10h：標準APIのロード
-------------------------------------------------------------------------------

	IN	AH = 10h
	Ret	Cy = 0 成功
		Cy = 1 失敗
			AL = エラーコード
			     22h  API の読み込み失敗
			     23h  API をロードするメモリが不足
			     24h  API プログラムのファイル形式が不正

-------------------------------------------------------------------------------
○11h：標準APIからの復帰
-------------------------------------------------------------------------------

	IN	AH = 11h

　標準API プログラムの initalize ルーチンから Free386 へ処理を復帰するときに
使用します。

-------------------------------------------------------------------------------
○int 0ffh: レジスタダンプ出力
-------------------------------------------------------------------------------

　Free386 のデバッグ用ファンクションです。
　int 0ffh を実行すると、その時点のレジスタダンプを STDOUT に出力します。


###############################################################################
●セレクタ一覧
###############################################################################

GDT:
　　セレクタ値	ベースアドレス	サイズ	属性
	000h	00000000h	   0 B	-	ヌルセレクタ
	008h	LOW-メモリ内	  64KB	R/X	Free386 CS
	010h	(08hと同じ)	  64KB	R/W	Free386 DS
	018h	(08hと同じ)	  64KB	R/X:286	Free386 CS（未使用）
	020h	(08hと同じ)	  64KB	R/W:286	Free386 DS（未使用）
	028h	Free386本体内	 512 B	LDT	LDT (LLDT されるセレクタ)
	030h	Free386本体内	 512 B	R/W 	LDT アクセス用
	038h	Free386本体内	 512 B	R/W 	GDT アクセス用
	040h	00000000h	 ---MB	R/W 	実装メモリ(RAM)全体(*)
	050h	Free386本体内	 512 B	R/X	IDT アクセス用
	060h	00000000h	1088KB	R/X	DOSメモリ全体
	068h	--------	 ---KB	R/X	VCPIサーバ CS
	070h	--------	 ---KB	R/W	VCPIサーバ データ領域
	078h	--------	 ---KB	?/?	VCPIサーバによる
	080h	Free386本体内	 128 B	TSS	使用中 TSS
	088h	(80hと同じ)	 128 B  R/W	TSS アクセス用

LDT:
　　セレクタ値	ベースアドレス	サイズ	属性
	004h	(08hと同じ)	 256 B	R/W	PSP
	00ch	(1MB以上)	 ---MB	R/X	ユーザプログラム CS
	014h	(0chと同じ)	  〃MB	R/W	ユーザプログラム DS
	024h	(04hと同じ)	 256 B	R/W	PSP
	02ch	LOW-メモリ内	 --- B	R/W	ENV / DOS環境メモリ
	034h	00000000h	1088KB	R/W	DOSメモリ全体

	※"0ch"や"14h"は本来可変だと思う。

###############################################################################
●PSP について
###############################################################################

　詳しくは DOS 関連の資料をあたってください。

	+5ch d	プログラム最小必要メモリサイズ (byte, 4KBの倍数)
	+60h d	実際に割り当てたメモリサイズ   (byte, 4KBの倍数)
	+64h d	ヒープメモリサイズ = [60h] - プログラムサイズ
	+80h b	パラメタ文字列の数 (0-127)
	+81h	パラメタ文字列。
	  ：	CR(0dh) で終わり、80h に格納されるパラメタサイズは、
	+ffh	80h 〜 CR で挟まれた間の文字数を示す。

	5ch/60h/64hの値はオフセットを含まない。

　なお、

	+2ch w	環境メモリへのポインタ（セグメント）

　は、RUN386/EXE386 に習って Free386 (DOS) のものから変更しておりません。

